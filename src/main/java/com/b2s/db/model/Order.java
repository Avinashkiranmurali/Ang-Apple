package com.b2s.db.model;

import com.b2s.rewards.apple.model.OrderAttributeValue;
import com.b2s.rewards.apple.model.UserVarProgramCreditAdds;
import com.b2s.rewards.common.util.CommonConstants;
import com.b2s.shop.common.order.OrderIF;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.joda.money.CurrencyUnit;
import org.joda.money.Money;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Optional;


public class Order implements OrderIF {




    /**
     * interface used to determine if an orderLine shall be considered for processing in
     * a method.
     */
    public interface FilterCriteria {
        /**
         * determines if the orderLine meets the criteria necessary to be included
         * in a processing algorithm
         *
         * @param orderLine
         * @return
         */
        boolean isInclusionCriteriaSatisfied(final OrderLine orderLine);
    }

    private List<OrderLine> orderLines = null;
    private String fullname;
    private String fullfillmentPartnerName;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.order_id
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private Long orderId;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.supplier_id
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String supplierId;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.var_id
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String varId;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.program_id
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String programId;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.order_date
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private Date orderDate;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.user_id
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String userId;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.firstname
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String firstname;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.lastname
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String lastname;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.addr1
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String addr1;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.addr2
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String addr2;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.city
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String city;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.state
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String state;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.zip
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String zip;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.country
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String country;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.phone
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String phone;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.email
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String email;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.last_update
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private Date lastUpdate;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.user_points
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private Integer userPoints;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.is_apply_super_saver_shipping
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String isApplySuperSaverShipping;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.gift_message
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String giftMessage;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.ship_desc
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String shipDesc;
    /**
     * This field was generated by Abator for iBATIS.
     * This field corresponds to the database column orders.var_order_id
     *
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    private String varOrderId;
    private String orderSource;
    private String notificationType;
    private Integer appVersion;

    /**
     * Id or username of the proxy user that placed the order.
     *
     * @see User#proxyUserId
     */
    private String proxyUserId;
    /**
     * Language code of the user who placed this order. This value is defaulted to "en".
     */
    private String languageCode = "en";
    /**
     * Country code of the user who placed this order. This value is defaulted to "".
     */
    private String countryCode = "";
    /**
     * Currency used when placing this order. This value is defaulted to in the database to "USD".
     */
    private String currencyCode = "USD";

    List<OrderAttributeValue> orderAttributeValues;

    private String ipAddress;

    private String addr3;

    private String businessName;

    private Long employeeGroupId;

    private long selectedAddressId;

    private boolean employerManaged;

    private String isAddressChanged;
    private String isEmailChanged;

    private Double gstAmount;
    private Integer earnedPoints;
    private Integer establishmentFeesPoints;
    private Double establishmentFeesPrice;

    public Integer getEstablishmentFeesPoints() {
        return establishmentFeesPoints;
    }

    public void setEstablishmentFeesPoints(final Integer establishmentFeesPoints) {
        this.establishmentFeesPoints = establishmentFeesPoints;
    }

    public Double getEstablishmentFeesPrice() {
        return establishmentFeesPrice;
    }

    public void setEstablishmentFeesPrice(final Double establishmentFeesPrice) {
        this.establishmentFeesPrice = establishmentFeesPrice;
    }

    public Double getGstAmount() {
        return gstAmount;
    }

    public void setGstAmount(final Double gstAmount) {
        this.gstAmount = gstAmount;
    }

    public String getIsAddressChanged() {
        return isAddressChanged;
    }

    public void setIsAddressChanged(final String isAddressChanged) {
        this.isAddressChanged = isAddressChanged;
    }

    public String getIsEmailChanged() {
        return isEmailChanged;
    }

    public void setIsEmailChanged(final String isEmailChanged) {
        this.isEmailChanged = isEmailChanged;
    }

    public String getAddr3() {
        return addr3;
    }

    public void setAddr3(String addr3) {
        this.addr3 = addr3;
    }

    public String getBusinessName() {
        return businessName;
    }

    public void setBusinessName(String businessName) {
        this.businessName = businessName;
    }

    /*
        *  This field is for identifing whether it is an recommended address or not
        * */
    private String ignoreSuggestedAddress;

    public String getIpAddress() {
        return ipAddress;
    }

    public void setIpAddress(final String ipAddress) {
        this.ipAddress = ipAddress;
    }

    public String getIgnoreSuggestedAddress() {
        return ignoreSuggestedAddress;
    }

    public void setIgnoreSuggestedAddress(final String ignoreSuggestedAddress) {
        this.ignoreSuggestedAddress = ignoreSuggestedAddress;
    }

    public void setEmployerManaged(final boolean employerManaged) {
        this.employerManaged = employerManaged;
    }

    public boolean isEmployerManaged() {
        return employerManaged;
    }

    @Override
    public List<OrderLine> getOrderLines() {
        return orderLines;
    }

    @Override
    public void setOrderLines(List<OrderLine> list) {
        orderLines = list;
    }

    private String selectedPaymentOption;

    public String getSelectedPaymentOption() {
        return selectedPaymentOption;
    }

    public void setSelectedPaymentOption(String selectedPaymentOption) {
        this.selectedPaymentOption = selectedPaymentOption;
    }

    public Integer getEarnedPoints() {
        return earnedPoints;
    }

    public void setEarnedPoints(final Integer earnedPoints) {
        this.earnedPoints = earnedPoints;
    }

    public Long getEmployeeGroupId() {
        return employeeGroupId;
    }

    public void setEmployeeGroupId(Long employeeGroupId) {
        this.employeeGroupId = employeeGroupId;
    }

    /*
                 *  This method calculates the total price in points for this order.  This
                 *  value is not persisted in the database, but calculated based on other values stored in the database.  The
                 *  formula for the calculation is the following:
                 *
                 *  Total order = sum of order_line_points of all the order lines in this order excluding credit lines
                 *
                 *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
                 */
    public int getOrderTotalInPoints() {
        final List<OrderLine> orderLinesList = getOrderLines();
        int total = 0;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S) && !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S)) {
                    total += line.getOrderLinePoints() * line.getQuantity();
                }
            }
        return total<0?0:total;
    }

    /*
     *  This method calculates the total supplier price in pennies for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of (supplier total price * quantity) of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S) && !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S)) {
                total = total.add(line.getSupplierTotalInMoneyMinor().multiply(BigDecimal.valueOf(line.getQuantity())));
            }
        }
        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())),
            total.longValue()<0?0:total.longValue());
    }


    /*
     *  This method calculates the total supplier price in pennies for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of (supplier total price * quantity) of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalWithSupplierTaxInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S) && !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S)) {
                total = total.add(line.getSupplierTotalWithSupplierTaxInMoneyMinor().multiply(BigDecimal.valueOf(line.getQuantity())));
            }
        }
        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())),
                total.longValue()<0?0:total.longValue());
    }

    public Money getSupplierTaxPriceInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S) && !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S)) {
                total = total.add(BigDecimal.valueOf(line.getSupplierTaxPrice()).multiply(BigDecimal.valueOf(line.getQuantity())));
            }
        }
        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())),
            total.longValue()<0?0:total.longValue());
    }

    /*
     *  This method is exclusively for DRP flow and calculates the total supplier price in pennies for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of (supplier total price * quantity) of all the order lines in this order excluding credit
     *  lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and
     *  taxes.
     */
    public Money getDRPOrderTotalInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;

        total = orderLinesList.stream()
            .filter(line -> !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S) &&
                !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S))
            .map(line -> BigDecimal.valueOf(line.getVarOrderLinePrice()).multiply(BigDecimal.valueOf(line
                .getQuantity())))
            .reduce(BigDecimal.ZERO, BigDecimal::add);

        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())),
            total.longValue() < 0 ? 0 : total.longValue());
    }



    /**
     * This method will return net remaining balance with deducting any credit line, discount or payroll deduction items
     *
     * @return
     */
    public Money getVarOrderPriceTotalInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S) && !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S)) {
                total = total.add(BigDecimal.valueOf(line.getVarOrderLinePrice()).multiply(BigDecimal.valueOf(line.getQuantity())));
            }
        }
        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.longValue());
    }
    /**
     * Taxes and fees are stored at the item lin in individual collections of taxes and fees.  The values stored are in pennies.
     * @return A BigDecimal representing the amount in currency unit of the order's currency.
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalTaxesAndFeesInMoney() {
        return getOrderTotalFeesInMoney().plus(getOrderTotalTaxesInMoney());
    }

    /**
     * Taxes and fees are stored at the item lin in individual collections of taxes and fees.  The values stored are in pennies.
     * @return A BigDecimal representing the amount in currency unit of the order's currency.
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public int getOrderTotalTaxesAndFeesInPoints() {
        return getOrderTotalFeesInPoints() + getOrderTotalTaxesInPoints();
    }

    /*
     *  This method calculates the total taxes in pennies for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of taxes of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalTaxesInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                if(StringUtils.equals(line.getAttr1(),CommonConstants.DISCOUNT_APPLIED)){
                  total = total.add(line.getDiscountedTotalTaxesInMoneyMinor().multiply(BigDecimal.valueOf(line
                       .getQuantity())));
                }else{
                   total = total.add(line.getTotalTaxesInMoneyMinor().multiply(BigDecimal.valueOf(line.getQuantity())));
                }
            }
        }
        return Money.of(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())),
                total.doubleValue());
    }

    /*
     *  This method calculates the total taxes in points for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of taxes of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public int getOrderTotalTaxesInPoints() {
        final List<OrderLine> orderLinesList = getOrderLines();
        int total = 0;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                total += line.getTotalTaxesInPoints() * line.getQuantity();
            }
        }
        return total;
    }


    /*
     *  This method calculates the total taxes in points for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of taxes of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public int getOrderTotalTaxesInPointsFromOrderLine() {
        final List<OrderLine> orderLinesList = getOrderLines();
        int total = 0;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                total += line.getTaxPoints() * line.getQuantity();
            }
        }
        return total;
    }

    /*
     *  This method calculates the total fees in pennies for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of taxes of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalFeesInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                if(StringUtils.equals(line.getAttr1(),CommonConstants.DISCOUNT_APPLIED)){
                    total = total.add(line.getDiscountedTotalFeesInMoneyMinor().multiply(BigDecimal.valueOf(line.getQuantity())));
                }else{
                    total = total.add(line.getTotalFeesInMoneyMinor().multiply(BigDecimal.valueOf(line.getQuantity())));
                }

            }
        }
        return Money.of(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.doubleValue());
    }

    /*
     *  This method calculates the total fees in points for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of taxes of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public int getOrderTotalFeesInPoints() {
        final List<OrderLine> orderLinesList = getOrderLines();
        int total = 0;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                total += line.getTotalFeesInPoints() * line.getQuantity();
            }
        }
        return total;
    }

    /*
     *  This method calculates the total shipping in pennies for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of shipping of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalShippingInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                total = total.add(BigDecimal.valueOf(line.getSupplierShippingPrice()).multiply(BigDecimal.valueOf(line.getQuantity())));
            }
        }
        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.longValue());
    }

    /*
     *  This method calculates the total shipping in points for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of shipping of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public int getOrderTotalShippingInPoints() {
        final List<OrderLine> orderLinesList = getOrderLines();
        int total = 0;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                total += line.getShippingPoints() * line.getQuantity();
            }
        }
        return total;
    }

    /*
     *  This method calculates the sub-total in pennies for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of supplier item price of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderSubTotalInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S) && !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S)
                 && !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_DISCOUNTCODE_S)) {
                if(StringUtils.equals(line.getAttr1(),CommonConstants.DISCOUNT_APPLIED)){
                    total = total.add(BigDecimal.valueOf(line.getDiscountedSupplierItemPrice()).multiply(BigDecimal.valueOf(line.getQuantity())));
                }else {
                    total = total.add(BigDecimal.valueOf(line.getSupplierItemPrice()).multiply(BigDecimal.valueOf(line.getQuantity())));
                }

            }
        }
        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.longValue());
    }


    /*
 *  This method calculates the sub-total in pennies for this order with VAR margin and B2S margin.  This
 *  value is not persisted in the database, but calculated based on other values stored in the database.  The
 *  formula for the calculation is the following:
 *
 *  Total order = sum of supplier item price of all the order lines in this order excluding credit lines
 *
 *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
 */
    public Money getOrderSubTotalWithVarAndB2SMarginInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S) && !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S)
                    && !line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_DISCOUNTCODE_S)) {
                total = total.add(BigDecimal.valueOf(line.getSupplierItemPrice()).multiply(BigDecimal.valueOf(line.getQuantity())));

                if(line.getB2sItemProfitPrice() != null && line.getB2sItemProfitPrice() != 0) {
                    total = total.add(new BigDecimal(line.getB2sItemProfitPrice()).negate());
                }
                if(line.getVarItemProfitPrice() != null && line.getVarItemProfitPrice() != 0) {
                    total = total.add(new BigDecimal(line.getVarItemProfitPrice()).negate());
                }
            }

        }
        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.longValue());
    }

    /**
     * This method will return net remaining balance with deducting any credit line, discount or payroll deduction items
     *
     * @return
     */
    public Money getOrderNetTotalInMoney() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            total = total.add(BigDecimal.valueOf(line.getVarOrderLinePrice()).multiply(BigDecimal.valueOf(line.getQuantity())));
        }
        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.longValue());
    }

    /*
     *  This method calculates the sub-total in points for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of supplier item points of all the order lines in this order excluding credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public int getOrderSubTotalInPoints() {
        final List<OrderLine> orderLinesList = getOrderLines();
        int total = 0;
        for (final OrderLine line : orderLinesList) {
            if (!line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                total += line.getItemPoints() * line.getQuantity();
            }
        }
        return total;
    }

    /*
     *  This method calculates the total price in points for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of order_line_points of all the order lines in this order including credit lines
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public int getOrderTotalPointsPaid() {
        final List<OrderLine> orderLinesList = getOrderLines();
        int total = 0;
        for (final OrderLine line : orderLinesList) {
            total += line.getOrderLinePoints() * line.getQuantity();
        }
        return total;
    }

    /**
     * returns the total points paid on the order subtracting the cashBuyInPoints,
     * excluding any orderLines that do not meet the inclusionCriteria in order to
     * included in processing
     * @param filterCriteria filterCriteria that defines whether an orderLine
     *                       should be included in processing.  This is defined by the
     *                       caller
     * @return the total number of points paid
     */
    public int getOrderTotalPointsPaid(final FilterCriteria filterCriteria) {
        int total = 0;
        //noinspection unchecked
        final List<OrderLine> orderLineList = getOrderLines();
        for (final OrderLine orderLine : orderLineList) {
            if (!filterCriteria.isInclusionCriteriaSatisfied(orderLine)) {
                continue;
            }

            final int cashBuyInPoints =
                orderLine.getCashBuyInPoints() != null ? orderLine.getCashBuyInPoints().abs().intValueExact() : 0;
            total += (orderLine.getOrderLinePoints() * orderLine.getQuantity() - cashBuyInPoints);
        }
        return total;
    }

    /*
     *  This method calculates the total supplier price in pennies for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.  The
     *  formula for the calculation is the following:
     *
     *  Total order = sum of (supplier total price * quantity) of all the credit order lines in this order
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalMoneyPaid() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                total = total.add(line.getSupplierTotalInMoneyMinor().multiply(BigDecimal.valueOf(line.getQuantity()))).negate();
                if(line.getB2sItemProfitPrice() != null && line.getB2sItemProfitPrice() != 0) {
                    total = total.add(new BigDecimal(line.getB2sItemProfitPrice()).negate());
                }
                if(line.getVarItemProfitPrice() != null && line.getVarItemProfitPrice() != 0) {
                    total = total.add(new BigDecimal(line.getVarItemProfitPrice()).negate());
                }
            }
        }
        String countryCode = this.getCountryCode();
        if (StringUtils.isEmpty(countryCode)) {
            countryCode = "US";
            this.setCountryCode(countryCode);
        }

        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.longValue());
    }

    public boolean isSplitTenderOrder() {
        final List<OrderLine> orderLines = getOrderLines();
        for (final OrderLine line : orderLines) {
            if (line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S) && line.getSupplierItemPrice() != null && line.getSupplierItemPrice() < 0) {
                return true;
            }
        }
        return false;
    }

    /*
     *  This method calculates the total discounts applied for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalDiscounts() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_DISCOUNTCODE_S)) {
                total = total.add(line.getSupplierTotalInMoneyMinor()).negate();
            }
        }
        String countryCode = this.getCountryCode();
        if (StringUtils.isEmpty(countryCode)) {
            countryCode = "US";
            this.setCountryCode(countryCode);
        }

        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.longValue());
    }

    /*
     *  This method calculates the payroll deduction applied for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalPayrollPrice() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;
        for (final OrderLine line : orderLinesList) {
            if (line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S)) {
                total = total.add(line.getSupplierTotalInMoneyMinor()).negate();
            }
        }
        String countryCode = this.getCountryCode();
        if (StringUtils.isEmpty(countryCode)) {
            countryCode = "US";
            this.setCountryCode(countryCode);
        }
        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.longValue());
    }


    /*
     *  This method calculates the payroll deduction applied for this order.  This
     *  value is not persisted in the database, but calculated based on other values stored in the database.
     *
     *  Note:  DO NOT call this method unless this model object is fully loaded including order lines and fees and taxes.
     */
    public Money getOrderTotalPayrollPeriodPrice() {
        final List<OrderLine> orderLinesList = getOrderLines();
        BigDecimal total = BigDecimal.ZERO;

        if(CollectionUtils.isNotEmpty(this.orderAttributeValues)) {
            Optional<BigDecimal> payPerPeriod=orderAttributeValues.stream()
                .filter(attributeValue -> attributeValue.getName().equalsIgnoreCase(CommonConstants.PPC_PAY_PER_PERIOD))
                .map(OrderAttributeValue::getValue)
                .map(BigDecimal::new)
                .findFirst();

            if (payPerPeriod.isPresent()){
                total=payPerPeriod.get();
                return Money.of(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total);
            }
        }

        for (final OrderLine line : orderLinesList) {
            if (line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_PAYROLLDEDUCTION_S)) {
                total = total.add(new BigDecimal(new Double(line.getAttr1())));
            }
        }

        String countryCode = this.getCountryCode();
        if (StringUtils.isEmpty(countryCode)) {
            countryCode = "US";
            this.setCountryCode(countryCode);
        }

        return Money.ofMinor(CurrencyUnit.of(new Locale(this.getLanguageCode(), this.getCountryCode())), total.longValue());
    }

    public Integer getPayrollFrequency() {
        int payrollFrequency = 0;

        Optional<String> payFrequency=orderAttributeValues.stream()
            .filter(attributeValue -> attributeValue.getName().equalsIgnoreCase(CommonConstants.PPC_PAY_PERIODS))
            .map(OrderAttributeValue::getValue)
            .findFirst();

        if(payFrequency.isPresent()){
            return payrollFrequency=Integer.valueOf(payFrequency.get());
        }

        if(CollectionUtils.isNotEmpty(this.orderAttributeValues)) {
            for(OrderAttributeValue orderAttributeValue : orderAttributeValues) {
                if(orderAttributeValue != null && CommonConstants.PAY_PERIODS.equals(orderAttributeValue.getName())) {
                    payrollFrequency = Integer.valueOf(orderAttributeValue.getValue());
                    break;
                }
            }
        }
        return payrollFrequency;
    }

    public String getPayrollDuration() {
        String payrollFrequency = "";
        Optional<String> payDuration=orderAttributeValues.stream()
            .filter(attributeValue -> attributeValue.getName().equalsIgnoreCase(CommonConstants.PPC_PAY_DURATION))
            .map(OrderAttributeValue::getValue)
            .findFirst();

        if(payDuration.isPresent()){
            return payDuration.get();
        }

        if(CollectionUtils.isNotEmpty(this.orderAttributeValues)) {
            for(OrderAttributeValue orderAttributeValue : orderAttributeValues) {
                if(orderAttributeValue != null && CommonConstants.PAY_DURATION.equals(orderAttributeValue.getName())) {
                    payrollFrequency = orderAttributeValue.getValue();
                    break;
                }
            }
        }
        return payrollFrequency;
    }

    public String getProgramLogoUrl() {
        String programLogoUrl = null;
        if(CollectionUtils.isNotEmpty(this.orderAttributeValues)) {
            for(OrderAttributeValue orderAttributeValue : orderAttributeValues) {
                if(orderAttributeValue != null && CommonConstants.PROGRAM_LOGO_URL.equals(orderAttributeValue.getName())) {
                    programLogoUrl = orderAttributeValue.getValue();
                    break;
                }
            }
        }
        return programLogoUrl;
    }

    public int getOrderTotalCashBuyInPoints() {
        int total = 0;
        final List<OrderLine> orderLinesList = getOrderLines();
        for (final OrderLine line : orderLinesList) {
            if (line.getSupplierId().equals(CommonConstants.SUPPLIER_TYPE_CREDIT_S)) {
                total = total + line.getOrderLinePoints();
            }
        }
        return total;
    }

    /**
     * Like getOrderTotalInPoints() which excludes credit lines.
     * This method includes credit lines so if the user is paying for the order
     * in points and credit-card (split-pay), the total is correct.
     *
     * @return
     */
    public int getOrderTotalPointsIncludingDiscountsAndCredits() {
        int total = 0;
        final List<OrderLine> orderLinesList = getOrderLines();
        for (final OrderLine line : orderLinesList) {
            total += line.getOrderLinePoints()*line.getQuantity();
        }
        return total;
    }

    public String getFullname() {
        return fullname;
    }

    public void setFullname(String fullname) {
        this.fullname = fullname;
    }

    public String getFullfillmentPartnerName() {
        return fullfillmentPartnerName;
    }

    public void setFullfillmentPartnerName(String fullfillmentPartnerName) {
        this.fullfillmentPartnerName = fullfillmentPartnerName;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.order_id
     *
     * @return the value of orders.order_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public Long getOrderId() {
        return orderId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.order_id
     *
     * @param orderId the value for orders.order_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setOrderId(Long orderId) {
        this.orderId = orderId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.supplier_id
     *
     * @return the value of orders.supplier_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getSupplierId() {
        return supplierId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.supplier_id
     *
     * @param supplierId the value for orders.supplier_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setSupplierId(String supplierId) {
        this.supplierId = supplierId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.var_id
     *
     * @return the value of orders.var_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getVarId() {
        return varId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.var_id
     *
     * @param varId the value for orders.var_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setVarId(String varId) {
        this.varId = varId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.program_id
     *
     * @return the value of orders.program_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getProgramId() {
        return programId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.program_id
     *
     * @param programId the value for orders.program_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setProgramId(String programId) {
        this.programId = programId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.order_date
     *
     * @return the value of orders.order_date
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public Date getOrderDate() {
        return orderDate;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.order_date
     *
     * @param orderDate the value for orders.order_date
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setOrderDate(Date orderDate) {
        this.orderDate = orderDate;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.user_id
     *
     * @return the value of orders.user_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getUserId() {
        return userId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.user_id
     *
     * @param userId the value for orders.user_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setUserId(String userId) {
        this.userId = userId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.firstname
     *
     * @return the value of orders.firstname
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.firstname
     *
     * @param firstname the value for orders.firstname
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.lastname
     *
     * @return the value of orders.lastname
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.lastname
     *
     * @param lastname the value for orders.lastname
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.addr1
     *
     * @return the value of orders.addr1
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getAddr1() {
        return addr1;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.addr1
     *
     * @param addr1 the value for orders.addr1
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setAddr1(String addr1) {
        this.addr1 = addr1;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.addr2
     *
     * @return the value of orders.addr2
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getAddr2() {
        return addr2;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.addr2
     *
     * @param addr2 the value for orders.addr2
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setAddr2(String addr2) {
        this.addr2 = addr2;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.city
     *
     * @return the value of orders.city
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getCity() {
        return city;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.city
     *
     * @param city the value for orders.city
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setCity(String city) {
        this.city = city;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.state
     *
     * @return the value of orders.state
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getState() {
        return state;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.state
     *
     * @param state the value for orders.state
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setState(String state) {
        this.state = state;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.zip
     *
     * @return the value of orders.zip
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getZip() {
        return zip;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.zip
     *
     * @param zip the value for orders.zip
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setZip(String zip) {
        this.zip = zip;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.country
     *
     * @return the value of orders.country
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getCountry() {
        return country;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.country
     *
     * @param country the value for orders.country
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setCountry(String country) {
        this.country = country;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.phone
     *
     * @return the value of orders.phone
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getPhone() {
        return phone;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.phone
     *
     * @param phone the value for orders.phone
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setPhone(String phone) {
        this.phone = phone;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.email
     *
     * @return the value of orders.email
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getEmail() {
        return email;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.email
     *
     * @param email the value for orders.email
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.last_update
     *
     * @return the value of orders.last_update
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public Date getLastUpdate() {
        return lastUpdate;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.last_update
     *
     * @param lastUpdate the value for orders.last_update
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setLastUpdate(Date lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.user_points
     *
     * @return the value of orders.user_points
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public Integer getUserPoints() {
        return userPoints;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.user_points
     *
     * @param userPoints the value for orders.user_points
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setUserPoints(Integer userPoints) {
        this.userPoints = userPoints;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.is_apply_super_saver_shipping
     *
     * @return the value of orders.is_apply_super_saver_shipping
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getIsApplySuperSaverShipping() {
        return isApplySuperSaverShipping;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.is_apply_super_saver_shipping
     *
     * @param isApplySuperSaverShipping the value for orders.is_apply_super_saver_shipping
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setIsApplySuperSaverShipping(String isApplySuperSaverShipping) {
        this.isApplySuperSaverShipping = isApplySuperSaverShipping;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.gift_message
     *
     * @return the value of orders.gift_message
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getGiftMessage() {
        return giftMessage;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.gift_message
     *
     * @param giftMessage the value for orders.gift_message
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setGiftMessage(String giftMessage) {
        this.giftMessage = giftMessage;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.ship_desc
     *
     * @return the value of orders.ship_desc
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getShipDesc() {
        return shipDesc;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.ship_desc
     *
     * @param shipDesc the value for orders.ship_desc
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setShipDesc(String shipDesc) {
        this.shipDesc = shipDesc;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method returns the value of the database column orders.var_order_id
     *
     * @return the value of orders.var_order_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public String getVarOrderId() {
        return varOrderId;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method sets the value of the database column orders.var_order_id
     *
     * @param varOrderId the value for orders.var_order_id
     * @abatorgenerated Wed Oct 25 21:10:17 PDT 2006
     */
    public void setVarOrderId(String varOrderId) {
        this.varOrderId = varOrderId;
    }

    public String getOrderSource() {
        return orderSource;
    }

    public void setOrderSource(String orderSource) {
        this.orderSource = orderSource;
    }

    public String getNotificationType() {
        return notificationType;
    }

    public void setNotificationType(String notificationType) {
        this.notificationType = notificationType;
    }

    public Integer getAppVersion() {
        return appVersion;
    }

    public void setAppVersion(Integer appVersion) {
        this.appVersion = appVersion;
    }

    public String getProxyUserId() {
        return proxyUserId;
    }

    public void setProxyUserId(String proxyUserId) {
        this.proxyUserId = proxyUserId;
    }

    public String getLanguageCode() {
        return languageCode;
    }

    public void setLanguageCode(String languageCode) {
        this.languageCode = languageCode;
    }

    public String getCountryCode() {
        return countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    public String getCurrencyCode() {
        return currencyCode;
    }

    public void setCurrencyCode(final String currencyCode) {
        this.currencyCode = currencyCode;
    }

    //Custom methods
    public String getOrderDateAsString() {
        return this.orderDate.toString();
    }

    public String getOrderDateAsISO8601() {
        return DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(this.orderDate);
    }

    public List<OrderAttributeValue> getOrderAttributeValues() {
        return orderAttributeValues;
    }

    public void setOrderAttributeValues(final List<OrderAttributeValue> orderAttributeValues) {
        this.orderAttributeValues = orderAttributeValues;
    }

    public long getSelectedAddressId() {
        return selectedAddressId;
    }

    public void setSelectedAddressId(final long selectedAddressId) {
        this.selectedAddressId = selectedAddressId;
    }

    private UserVarProgramCreditAdds userVarProgramCreditAdds;

    public UserVarProgramCreditAdds getUserVarProgramCreditAdds() {
        return userVarProgramCreditAdds;
    }

    public void setUserVarProgramCreditAdds(final UserVarProgramCreditAdds userVarProgramCreditAdds) {
        this.userVarProgramCreditAdds = userVarProgramCreditAdds;
    }
}
